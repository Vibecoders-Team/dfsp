name: dfsp-backend-dev

# Общие переменные из env-файлов:
# - .env.dev — дефолты для команды
# - .env.local — локальные оверрайды разработчика (если есть — берёт приоритет)
x-env-files: &env_files
  env_file:
    - path: ../../deploy/.env.dev
      required: false
    - path: ../../deploy/.env.local
      required: false

networks:
  dfsp:
    driver: bridge

volumes:
  pgdata:

services:
  # ----------- опциональная локальная БД (включается профилем localdb) ----------
  db:
    image: postgres:16-alpine
    container_name: dfsp-db
    <<: *env_files
    # ВАЖНО: значения POSTGRES_* считаем из DB_*, приходящих через env_file.
    # Делаем это ДО запуска стандартного entrypoint postgres.
    entrypoint:
      - /bin/sh
      - -c
      - |
        export POSTGRES_USER="${DB_USER:-dfsp}";
        export POSTGRES_PASSWORD="${DB_PASSWORD:-dfsp}";
        export POSTGRES_DB="${DB_NAME:-dfsp}";
        exec /usr/local/bin/docker-entrypoint.sh postgres
    # Порты нужны Compose заранее — оставляем как есть
    ports:
      - "${DB_HOST_PORT:-5432}:5432"
    healthcheck:
      # Экранируем $ → $$, чтобы переменные подставились ВНУТРИ контейнера
      test:
        [ "CMD-SHELL",
          "pg_isready -U $${DB_USER:-dfsp} -d $${DB_NAME:-dfsp} -p 5432" ]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [ dfsp ]
    profiles: [ "localdb" ]

  # ------------------------ Redis (по умолчанию включён) ------------------------
  redis:
    image: redis:7.2-alpine
    container_name: dfsp-redis
    <<: *env_files
    # env для самого redis-образа не нужен — он слушает 6379.
    # Порт наружу — задаётся Compose.
    ports:
      - "${REDIS_HOST_PORT:-6379}:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [ dfsp ]

  # ------------------------ Миграции (run-once, опционально) --------------------
  migrator:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: dfsp-migrator
    working_dir: /app
    <<: *env_files
    # Собираем все вычисляемые переменные внутри контейнера и запускаем миграции
    command:
      - bash
      - -lc
      - |
        export POSTGRES_DSN="postgresql+psycopg://$${DB_USER:-dfsp}:$${DB_PASSWORD:-dfsp}@$${DB_HOST:-dfsp-db}:$${DB_PORT:-5432}/$${DB_NAME:-dfsp}";
        export REDIS_URL="$${REDIS_URL:-redis://$${REDIS_HOST:-dfsp-redis}:$${REDIS_PORT:-6379}/$${REDIS_DB:-0}}";
        export WAIT_FOR_TIMEOUT="$${WAIT_FOR_TIMEOUT:-60}";
        ./docker/entrypoint.sh migrate
    depends_on:
      redis:
        condition: service_healthy
      #db:
      #  condition: service_healthy
    restart: "no"
    networks: [ dfsp ]
    #profiles: [ "migrate" ]

  # ----------------------------- API (uvicorn --reload) -------------------------
  api:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: dfsp-api
    working_dir: /app
    <<: *env_files
    command:
      - bash
      - -lc
      - |
        export POSTGRES_DSN="postgresql+psycopg://$${DB_USER:-dfsp}:$${DB_PASSWORD:-dfsp}@$${DB_HOST:-dfsp-db}:$${DB_PORT:-5432}/$${DB_NAME:-dfsp}";
        export REDIS_URL="$${REDIS_URL:-redis://$${REDIS_HOST:-dfsp-redis}:$${REDIS_PORT:-6379}/$${REDIS_DB:-0}}";
        export API_HOST="$${API_HOST:-0.0.0.0}";
        export API_PORT="$${API_PORT:-8000}";
        export API_RELOAD="$${API_RELOAD:-true}";
        export API_LOG_LEVEL="$${API_LOG_LEVEL:-info}";
        export API_AUTO_MIGRATE="$${API_AUTO_MIGRATE:-false}";
        export WAIT_FOR_TIMEOUT="$${WAIT_FOR_TIMEOUT:-60}";
        export JWT_SECRET="$${JWT_SECRET:-change_me}";
        ./docker/entrypoint.sh api
    ports:
      - "${API_HOST_PORT:-8000}:8000"
    volumes:
      - ../app:/app/app
      - ../alembic:/app/alembic
      - ../alembic.ini:/app/alembic.ini
    depends_on:
      redis:
        condition: service_healthy
      #db:
      #  condition: service_healthy
      migrator:
        condition: service_completed_successfully
    restart: unless-stopped
    networks: [ dfsp ]
