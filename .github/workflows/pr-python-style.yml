name: PR Guard - Python Style (backend)

on:
  pull_request:
    branches: ["main", "backend/main"]
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - "backend/**"
      - ".github/workflows/pr-python-style.yml"
      - "backend/pyproject.toml"

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  style:
    name: Ruff format + Ruff lint + Pyright
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
          echo "${HOME}/.uv/bin" >> $GITHUB_PATH

      - name: Create venv & dev deps
        run: |
          uv venv
          uv pip install -U ruff pyright

      - name: Ruff format (check)
        id: fmt
        run: uv run ruff format --check .
        continue-on-error: true

      - name: Ruff lint
        id: lint
        run: uv run ruff check .
        continue-on-error: true

      - name: Pyright (types)
        id: types
        run: uv run pyright
        continue-on-error: true

      - name: Fail if any style step failed
        id: verdict
        run: |
          F=0
          [ "${{ steps.fmt.outcome }}" != "success" ] && F=1
          [ "${{ steps.lint.outcome }}" != "success" ] && F=1
          [ "${{ steps.types.outcome }}" != "success" ] && F=1
          if [ $F -ne 0 ]; then
            echo "failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi

  close:
    name: Close PR on style violation
    runs-on: ubuntu-latest
    needs: [style]
    if: always() && needs.style.result == 'failure'
    steps:
      - name: Comment & close
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = [
              "‚ùå Python style checks failed for `backend/`:",
              "- ruff format --check",
              "- ruff check",
              "- pyright",
              "",
              "Please run locally:",
              "```bash",
              "make -C backend venv dev-deps",
              "make -C backend fmt lint typecheck",
              "```"
            ].join("\n");
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr.number, body });
            await github.rest.pulls.update({ owner: context.repo.owner, repo: context.repo.repo, pull_number: pr.number, state: 'closed' });
